' *******************************************************************************************
' Copyright (c) 2023 by RobotPatient Simulators
'
' Authors: Richard Kroesen
'
' Permission is hereby granted, free of charge, to any person obtaining a copy
' of this software and associated documentation files (the "Software"),
' to deal in the Software without restriction,
'
' including without limitation the rights to use, copy, modify, merge, publish, distribute,
' sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
' is furnished to do so,
'
' subject to the following conditions:
'
' The above copyright notice and this permission notice shall be included in
' all copies or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
'
' IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
' DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
' ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
' OTHER DEALINGS IN THE SOFTWARE.
' *********************************************************************************************/

@startuml INP_class_diagram_puml

set separator ::

package Manikin_Software_Libraries <<Node>> {
    class TwoWire {
        Arduino I2C library.
    }

    package com_intranet <<frame>> {
        ' Package indicates the working directory.
        namespace com::intranet {
            class I2C_driver {
                All TwoWire functions are wrapped here.
                +void begin()
                +uint8_t requestFrom(uint8_t address, size_t size, bool stopBit = true)
                +void beginTransmission(uint8_t address)
                +uint8_t endTransmission(bool stopBit = true)
                +void write(uint8_t data)
                +void write(const uint8_t* data, size_t size)
                +size_t available()
                +uint8_t read()
                +void setClock(uint32_t clockFrequency)
                +void onReceive(void (*handler)(int))
                +void onRequest(void (*handler)(int))
                +I2CAddr get_i2c_addr()
                +void set_i2c_addr(I2CAddr newAddr)
            }
            class hub_registers {
                Holds all the registers for the hub.
            }

            class inp_register {
            }

            class master_inp {
                Acts as the i2c master.
                +void write_register(SlavesAddress_t slave, 
                RegisterAddress_t regAddress,
                const uint8_t value);
                +uint8_t read_register(SlavesAddress_t slave, 
                RegisterAddress_t regAddress);
            }

            class hub_inp {
                Acts as a i2c slave.
                +void init(SlavesAddress_t slave);
                +static void setI2CPeripheral(hal::i2c::I2C_Driver* i2c_peripheral);
            }
            I2C_driver -- master_inp
            I2C_driver -- hub_inp
            hub_inp -- hub_registers
            hub_registers -- inp_register
        }
    }
    TwoWire -[dashed]-> com::intranet::I2C_driver
}

@enduml